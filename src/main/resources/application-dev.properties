# >>>运行环境配置项<<<
# 1. 配置tomcat
# 如果jar 包运行 则开启以下配置
# 设定编码
server.tomcat.uri-encoding=UTF-8
server.port=8081
## 指定访问项目路径的项目名
server.servlet.context-path=/data-source-serve
# 2. 配置spring
# 配置文件传输限制
#spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB
# 热部署
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-paths=src/main/java
# 配置静态文件路径,js,css等
spring.mvc.static-path-pattern=/**
spring.resources.static-locations=classpath:/static/,classpath:/public/
# 排除spring对数据源的自动配置
spring.autoconfigure.exclude=com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
# 约定传输编码格式
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
# >>>数据库配置项<<<
# 1. 数据库连接信息
DBPort=1521
DBServiceName=ORCL
DBServerAddr=localhost
#项目数据库
spring.datasource.url=jdbc:oracle:thin:@//${DBServerAddr}:${DBPort}/${DBServiceName}
spring.datasource.username=RIDEN
spring.datasource.password=oracle
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
# 2.数据库连接池配置
# 指定druid为数据源,如果不加,则默认的数据源为:org.apache.tomcat.jdbc.pool.DataSource
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 配置druid监控
druidMonitor.username=admin
druidMonitor.password=admin
druidMonitor.resetEnable=false
spring.datasource.initialSize=5
#最小连接池数量
spring.datasource.minIdle=5
#最大连接池数量
spring.datasource.maxActive=20
## 连接等待超时时间
spring.datasource.maxWait=60000
## 配置隔多久进行一次检测(检测可以关闭的空闲连接) 毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
## 配置连接在池中的最小生存时间 毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
#测试连接
spring.datasource.validationQuery=SELECT 1 FROM DUAL
#申请连接的时候检测，建议配置为true，不影响性能，并且保证安全性
spring.datasource.testWhileIdle=true
#获取连接时执行检测，建议关闭，影响性能
spring.datasource.testOnBorrow=false
#获取连接时执行检测，建议关闭，影响性能
spring.datasource.testOnReturn=false
## 打开PSCache，并且指定每个连接上PSCache的大小(PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭)
spring.datasource.poolPreparedStatements=true
#开启poolPreparedStatements后生效
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,slf4j
#通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#连接出错后再尝试连接0次
spring.datasource.connectionErrorRetryAttempts=0
#数据库服务宕机自动重连机制
spring.datasource.breakAfterAcquireFailure=true
# 3.mybatis配置项
# spring boot集成mybatis的方式打印sql,开发调试开启即可
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# 处理mybatis插入null值
mybatis.configuration.jdbc-type-for-null=NULL
## mybatis分页插件,具体参考改组件github文档:https://github.com/pagehelper/Mybatis-PageHelper
# 分页插件会自动检测当前的数据库链接，自动选择合适的分页方式,也可自行指定
pagehelper.helper-dialect=oracle
# 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询
pagehelper.reasonable=true
# 为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值
pagehelper.params=count=countSql
# 支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页
pagehelper.support-methods-arguments=true
# 默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）
pagehelper.page-size-zero=true
# 是否开启swagger
#enableSwagger=true


